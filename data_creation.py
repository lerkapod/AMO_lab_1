# -*- coding: utf-8 -*-
"""data_creation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Is36__Cr16JzB2YOxMCo3284mCSq5037
"""

#Импорт необходимых модулей
import csv
import random
import os


class Data_size:
    def __init__(self, bust, waist, hips,  Data_size_class):
        self.bust = bust
        self.waist = waist
        self.hips = hips

        self.Data_size_class = Data_size_class

    def __str__(self):
        return f"Class: {self.Data_size_class}, bust: {self.bust}, waist: {self.waist}, " \
               f"hips: {self.hips}"


def on_anomalies_noise(value):
    if (value % 7 == 0) and(value % 2 == 0):
      anomalies_noise =  random.randint(-10, 40)
    else: anomalies_noise = value
    return anomalies_noise



def create_random_options():
    classes = ['42(XS)', '44(S)', '46(M)','48(L)']  # Размеры одежды
    Data_size_class = random.choice(classes)

    if Data_size_class == '42(XS)':
        bust = random.randint(82, 85)
        waist = random.randint(66, 69)
        hips = random.randint(92, 95)


    elif Data_size_class == '44(S)':
        bust = random.randint(86, 89)
        waist = random.randint(70, 73)
        hips = random.randint(96, 98)


    elif Data_size_class == '46(M)':
        bust = random.randint(90, 93)
        waist = random.randint(74, 77)
        hips = random.randint(99, 101)


    else:  # Data_size_class == '48(L)'
        bust = random.randint(94, 97)
        waist = random.randint(78, 81)
        hips = random.randint(102, 105)


    bust = on_anomalies_noise(bust)
    waist = on_anomalies_noise(waist)
    hips = on_anomalies_noise(hips)

    return Data_size(bust, waist, hips,  Data_size_class)


def create_Data_sizes(number_of_Data_sizes):
    Data_sizes = []
    for _ in range(number_of_Data_sizes):
        Data_sizes.append(create_random_options())
    return Data_sizes


if __name__ == '__main__':
    Data_sizes = create_Data_sizes(100)
    random.shuffle(Data_sizes)

    split_ratio = 0.8  # 80% для тренировочных данных , 20% для тестовых
    split_index = int(len(Data_sizes) * split_ratio)
    train_data = Data_sizes[:split_index]
    test_data = Data_sizes[split_index:]

    # Создание папок, если они не существуют.
    if not os.path.exists('train'):
        os.makedirs('train')
    if not os.path.exists('test'):
        os.makedirs('test')

    train_file = os.path.join('train', 'train_Data_sizes.csv')
    test_file = os.path.join('test', 'test_Data_sizes.csv')

    with open(train_file, mode='w', newline='') as train_file:
        writer = csv.writer(train_file)
        writer.writerow(['Class', 'bust', 'waist', 'hips'])

        for Data_size in train_data:
            writer.writerow([Data_size.Data_size_class, Data_size.bust, Data_size.waist,
                             Data_size.hips])

    with open(test_file, mode='w', newline='') as test_file:
        writer = csv.writer(test_file)
        writer.writerow(['Class', 'bust', 'waist', 'hips'])

        for Data_size in test_data:
            writer.writerow([Data_size.Data_size_class, Data_size.bust, Data_size.waist,
                             Data_size.hips])

    print('Создание и сохранение данных прошло успешно')